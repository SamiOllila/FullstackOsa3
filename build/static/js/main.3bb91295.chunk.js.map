{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","components/Error.js","services/names.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","handleDeleteClick","name","number","onClick","size","Persons","persons","map","key","PersonForm","addName","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","Filter","filterInput","handleFilterInputChange","Notification","message","className","Error","baseUrl","axios","get","newObject","post","id","delete","put","App","useState","setPersons","setFilterInput","setNewName","setNewNumber","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","getPersonsFromApi","NameServices","then","response","data","useEffect","filteredPersons","filter","toUpperCase","includes","event","target","preventDefault","nameObject","onlyName","window","confirm","updatedPerson","p","setTimeout","catch","error","concat","newPersons","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3bb91295.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Person = ({ person,handleDeleteClick }) => {\r\n  const { name, number } = person\r\n  return (\r\n      <div>\r\n        <p>{name} {number}</p>\r\n        <button onClick={() => {handleDeleteClick(person)}} size=\"sm\" >\r\n            delete\r\n        </button>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst Persons = ({ persons,handleDeleteClick }) => {\r\n\r\n  return (\r\n    <div>\r\n      {persons.map(person => <div> \r\n        <Person key={person.name} person={person} handleDeleteClick={handleDeleteClick} />\r\n      </div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst PersonForm = ({ addName, newName, newNumber, handleNameChange, handleNumberChange }) => {\r\n\r\n  return (\r\n    <form onSubmit={addName}>\r\n      <div>\r\n        name: <input\r\n          value={newName}\r\n          onChange={handleNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input\r\n          value={newNumber}\r\n          onChange={handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\n\r\nconst Filter = ({ filterInput, handleFilterInputChange }) => {\r\n  return (\r\n    <form>\r\n        <div>\r\n          Filter shown with: <input \r\n            value={filterInput}\r\n            onChange={handleFilterInputChange} />\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"notification\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Error = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst addName = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst updateName = person => {\r\n  return axios.put(`${baseUrl}/${person.id}`, person)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  addName: addName, \r\n  deletePerson: deletePerson,\r\n  updateName: updateName\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Persons from './components/Persons'\r\nimport PersonForm from './components/PersonForm'\r\nimport Filter from './components/Filter'\r\nimport Notification from './components/Notification'\r\nimport Error from './components/Error'\r\nimport NameServices from './services/names'\r\n\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  \r\n  const [ filterInput, setFilterInput ] = useState('')\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\r\n  const [ errorMessage, setErrorMessage ] = useState(null)\r\n\r\n  const getPersonsFromApi = () => {\r\n    NameServices\r\n      .getAll()\r\n      .then(response => {setPersons(response.data)})\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPersonsFromApi()\r\n  }, [])\r\n\r\n\r\n  const handleFilterInputChange = (event) => {\r\n    setFilterInput(event.target.value)\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleDeleteClick = (person) => {\r\n    if (!window.confirm(`Delete ${person.name}?`)) return\r\n\r\n    const newPersons = persons.filter(p => p.id !== person.id)\r\n    setPersons(newPersons)\r\n    NameServices\r\n      .deletePerson(person.id)\r\n      .then(response => {\r\n        getPersonsFromApi()\r\n      }).catch(error => getPersonsFromApi())\r\n\r\n      setNotificationMessage(`Removed ${person.name}`)\r\n      setTimeout(() => {\r\n        setNotificationMessage(null)\r\n      }, 3000)\r\n  }\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    const nameObject = { \r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n    const storedNames = persons.map(onlyName => onlyName.name)\r\n    if (storedNames.includes(nameObject.name)) {\r\n      if (window.confirm(`${nameObject.name} is already added to phonebook. Replace the old number with new one?`)) {\r\n        const updatedPerson = {\r\n          name: newName,\r\n          number: newNumber,\r\n          id: persons.filter(p => p.name === nameObject.name)[0].id,\r\n        }\r\n        setNewName('')\r\n        setNewNumber('')\r\n        NameServices\r\n          .updateName(updatedPerson)\r\n          .then(response => {\r\n            getPersonsFromApi()\r\n            setNotificationMessage(`Updated ${updatedPerson.name}`)\r\n            setTimeout(() => {\r\n              setNotificationMessage(null)\r\n            }, 3000)\r\n          })\r\n          .catch(error => {\r\n            setErrorMessage(`${updatedPerson.name} has already been removed.`)\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 3000)\r\n          })\r\n        return\r\n      }\r\n    }\r\n    setPersons(persons.concat(nameObject))\r\n    setNewName('')\r\n    setNewNumber('')\r\n\r\n    NameServices\r\n      .addName(nameObject)\r\n      .then(response => {\r\n        getPersonsFromApi()\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(error.response.data)\r\n      })\r\n    setNotificationMessage(`Added ${nameObject.name}`)\r\n    setTimeout(() => {\r\n      setNotificationMessage(null)\r\n    }, 3000)\r\n  }\r\n\r\n  const filteredPersons = persons.filter(person => person.name.toUpperCase().includes(filterInput.toUpperCase()))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      <Notification message={notificationMessage} />\r\n      <Error message={errorMessage} />\r\n\r\n      <Filter filterInput={filterInput} handleFilterInputChange={handleFilterInputChange} />\r\n      <h2>Add a new</h2>\r\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\r\n      <h2>Numbers</h2>\r\n      <Persons persons={filteredPersons} handleDeleteClick={handleDeleteClick} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}